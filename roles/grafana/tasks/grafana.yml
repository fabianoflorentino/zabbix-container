---
- name: "{{ grafana_container_name }} - Verificando se o container existe"
  docker_container_info:
    name: "{{ grafana_container_name }}"
  register: grafana_result

- name: Grafana
  block:
    - name: "{{ grafana_container_name }} - Dockerhub"
      docker_image:
        name: "{{ grafana_image }}"
        source: pull

    - name: "{{ grafana_container_name }} - Iniciando o Container"
      docker_container:
        name: "{{ grafana_container_name }}"
        image: "{{ grafana_image }}"
        state: started
        recreate: yes
        restart: yes
        restart_policy: unless-stopped
        ports:
          - "{{ grafana_port }}"
  rescue:
    - name: "{{ grafana_container_name }} - Baixando a imagem do Dockerhub"
      docker_image:
        name: "{{ grafana_image }}"
        source: pull
      delegate_to: localhost

    - name: "{{ grafana_container_name }} - Savando a Imagem localmente"
      shell: |
        docker save -o "./roles/grafana/files/{{ grafana_image_tar }}" "{{ grafana_image }}"
      delegate_to: localhost

    - name: "{{ grafana_container_name }} - Enviando a Imagem"
      copy:
        src: "{{ grafana_image_tar }}"
        dest: "{{ grafana_file_dest }}"
    
    - name: "{{ grafana_container_name }} - Carregando a Imagem"
      docker_image:
        name: "{{ grafana_image_tar }}"
        load_path: "{{ grafana_file_dest }}"
        source: load
  
    - name: "{{ grafana_container_name }} - Iniciando o Grafana server"
      docker_container:
        name: "{{ grafana_container_name }}"
        image: "{{ grafana_image }}"
        state: started
        recreate: yes
        restart: yes
        restart_policy: unless-stopped
        ports:
          - "{{ grafana_port }}"

    - name: "{{ grafana_container_name }} - Removendo arquivos de imagens temporÃ¡rios"
      file:
        path: "{{ grafana_file_dest }}"
        state: absent
  when:
    - (grafana_result.exists != true)