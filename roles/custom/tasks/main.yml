---
- name: Waiting Zabbix Web to be ready
  ansible.builtin.wait_for:
    host: "{{ zabbix_server_ip }}"
    port: "8080"
    connect_timeout: 15
    delay: 5
    sleep: 5
    active_connection_states: ["ESTABLISHED"]
    state: started
  register: zabbix_web_state

- name: Verify Zabbix customizations
  ansible.builtin.stat:
    path: "/tmp/zabbix_custom.log"
  register: zabbix_custom

- name: Customs 
  block:
    - name: Script to generate zabbix token api
      ansible.builtin.template:
        src: "zbx_get_token_api.sh.j2"
        dest: "/tmp/zbx_get_token_api.sh"
        mode: "0755"

    - name: Generate zabbix token api
      ansible.builtin.command:
        cmd: bash /tmp/zbx_get_token_api.sh
      register: zabbix_auth_token

    - name: Remove zabbix token api script
      ansible.builtin.file:
        path: "/tmp/zbx_get_token_api.sh"
        state: absent
    
    # HostID
    - name: Generate zabbix hostid
      ansible.builtin.template:
        src: "zbx_get_host.sh.j2"
        dest: "/tmp/zbx_get_host.sh"
        mode: "0755"

    - name: Get zabbix hostid
      ansible.builtin.command:
        cmd: bash /tmp/zbx_get_host.sh
      register: zabbix_host_id

    - name: Remove zabbix hostid script
      ansible.builtin.file:
        path: "/tmp/zbx_get_host.sh"
        state: absent

# Slack Alerts
    - name: Deploy script to Slack Alerts
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "/tmp/{{ item }}"
        mode: "0755"
      loop: "{{ scripts_zbx_alertscripts }}"

    - name: Send script Slack Alerts to Zabbix Server
      ansible.builtin.shell: >
        docker cp "/tmp/slack_alerts.sh" {{ zabbix_server_container_name }}:"/usr/lib/zabbix/alertscripts/slack_alerts.sh"
      register: slack_alerts

    - name: Deploy script to media type
      ansible.builtin.command:
        cmd: bash /tmp/zbx_create_media.sh
      register: slack_media

    - name: Remove temporary scripts
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop: "{{ scripts_zbx_alertscripts }}"

    - name: Result to Slack Alerts 
      ansible.builtin.debug:
        msg: "{{ slack_media.stdout }}"

    - name: Configure logs to customizations
      ansible.builtin.file:
        path: "/tmp/zabbix_custom.log"
        state: touch

    - name: Generate log to customizations
      ansible.builtin.lineinfile:
        path: "/tmp/zabbix_custom.log"
        line: "Slack Alerts configurado"


# Auto Registro Linux
    - name: Send script for create Auto Register Linux to Zabbix Server
      ansible.builtin.template:
        src: "zbx_auto_registration_linux_servers.sh.j2"
        dest: "/tmp/zbx_auto_registration_linux_servers.sh"
        mode: "0755"

    - name: Deploy script for create Auto Register Linux
      ansible.builtin.command:
        cmd: bash /tmp/zbx_auto_registration_linux_servers.sh
      register: zbx_auto_registration_linux_servers

    - name: Result of the script for create Auto Register Linux
      ansible.builtin.debug:
        msg: "{{ zbx_auto_registration_linux_servers.stdout }}"

    - name: Cleanup script for create Auto Register Linux
      ansible.builtin.file:
        path: "/tmp/zbx_auto_registration_linux_servers.sh"
        state: absent


# Auto Registro Windows
    - name: Send script for create Auto Register Windows to Zabbix Server
      ansible.builtin.template:
        src: "zbx_auto_registration_windows_servers.sh.j2"
        dest: "/tmp/zbx_auto_registration_windows_servers.sh"
        mode: "0755"

    - name: Deploy script for create Auto Register Windows
      ansible.builtin.command:
        cmd: bash /tmp/zbx_auto_registration_windows_servers.sh
      register: zbx_auto_registration_windows_servers

    - name: Result of the script for create Auto Register Windows
      ansible.builtin.debug:
        msg: "{{ zbx_auto_registration_windows_servers.stdout }}"

    - name: Cleanup script for create Auto Register Windows
      ansible.builtin.file:
        path: "/tmp/zbx_auto_registration_windows_servers.sh"
        state: absent


# Reporte de Problemas
    - name: Send script for create Report Problems on Zabbix Server
      ansible.builtin.template:
        src: "zbx_report_problem_to_slack.sh.j2"
        dest: "/tmp/zbx_report_problem_to_slack.sh"
        mode: "0755"

    - name: Deploy script for create Report Problems on Zabbix Server
      ansible.builtin.command:
        cmd: bash /tmp/zbx_report_problem_to_slack.sh
      register: zbx_report_problem_to_slack

    - name: Result of the script for create Report Problems on Zabbix Server
      ansible.builtin.debug:
        msg: "{{ zbx_report_problem_to_slack.stdout }}"

    - name: Cleanup script for create Report Problems on Zabbix Server
      ansible.builtin.file:
        path: "/tmp/zbx_report_problem_to_slack.sh"
        state: absent
  when: zabbix_custom.stat.exists == false


# SSL Check
- name: SSL Check
  ansible.builtin.stat:
    path: "/tmp/ssl_check.log"
  register: ssl_check

- name: SSL Check
  block:
    - name: Send SSL Check script to Zabbix Server
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "/tmp/{{ item }}"
        mode: "0755"
      loop: "{{ scripts_zbx_externalscripts }}"

    - name: Deploy SSL Check script to Zabbix Server
      ansible.builtin.shell: |
        docker cp "/tmp/{{ item }}" {{ zabbix_server_container_name }}:"/usr/lib/zabbix/externalscripts/{{ item }}"
      args:
        executable: /bin/sh
      register: ssl_check_copy
      loop: "{{ scripts_zbx_externalscripts }}"

    - name: Cleanup SSL Check script to Zabbix Server
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop: "{{ scripts_zbx_externalscripts }}"

    # Log
    - name: Log SSL Check script to Zabbix Server
      ansible.builtin.file:
        path: "/tmp/ssl_check.log"
        state: touch

    - name: Generate Log SSL Check script to Zabbix Server
      ansible.builtin.lineinfile:
        path: "/tmp/ssl_check.log"
        line: "Scripts de SSL Check configurados"
  when:
    - (ssl_check.stat.exists != true)


# AIX Check Itens
- name: AIX Check Log
  ansible.builtin.stat:
    path: "/tmp/aix_check.log"
  register: aix_check

- name: AIX
  block:
    # bpadapterfail
    - name: Create Item to Script Adapterfail
      ansible.builtin.template:
        src: "aix_check_bpadapterfail.sh.j2"
        dest: "/tmp/aix_check_bpadapterfail.sh"
        mode: "0755"

    - name: Deploy Item to Script Adapterfail
      ansible.builtin.command:
        cmd: bash /tmp/aix_check_bpadapterfail.sh
      register: aix_check_bpadapterfail

    - name: Result Create Item to Script Adapterfail
      debug:
        msg: "{{ aix_check_bpadapterfail.stdout }}"

    - name: Log Create Item to Script Adapterfail
      ansible.builtin.file:
        path: "/tmp/aix_check.log"
        state: touch
    
    # bpbootlist
    - name: Create Item to Script Bootlist
      ansible.builtin.template:
        src: "aix_check_bpbootlist.sh.j2"
        dest: "/tmp/aix_check_bpbootlist.sh"
        mode: "0755"

    - name: Deploy Item to Script Bootlist
      ansible.builtin.command:
        cmd: bash /tmp/aix_check_bpbootlist.sh
      register: aix_check_bpbootlist

    - name: Result Item to Script Bootlist
      ansible.builtin.debug:
        msg: "{{ aix_check_bpbootlist.stdout }}"

    # Log
    - name: Log Create Item to Script
      ansible.builtin.file:
        path: "/tmp/aix_check.log"
        state: touch

    - name: Generate Log Create Item to Script
      ansible.builtin.lineinfile:
        path: "/tmp/aix_check.log"
        line: "Scripts de AIX Check configurados"

    # Remoção
    - name: Cleanup Scripts Adapterfail
      ansible.builtin.file:
        path: "/tmp/aix_check_bpadapterfail.sh"
        state: absent

    - name: Cleanup Bootlist
      ansible.builtin.file:
        path: "/tmp/aix_check_bpbootlist.sh"
        state: absent
  when: aix_check.stat.exists == false


# HostID
- name: HostID
  ansible.builtin.stat:
    path: "/tmp/hostid.log"
  register: hostid_check

- name: HostID
  block:
    - name: Configure Log HostID
      ansible.builtin.file:
        path: "/tmp/hostid_check.log"
        state: touch

    - name: Send script to remove the first zabbix serve register on Zabbix Server
      ansible.builtin.template:
        src: "zbx_del_first_zbxsrv.sh.j2"
        dest: "/tmp/zbx_del_first_zbxsrv.sh"
        mode: "0755"
    
    - name: Cleanup script to remove the first zabbix serve register on Zabbix Server
      ansible.builtin.command:
        cmd: bash /tmp/zbx_del_first_zbxsrv.sh
      register: zbx_del_first_zbxsrv
    
    - name: Result cleanup script to remove the first zabbix serve register on Zabbix Server
      ansible.builtin.debug:
        msg: "{{ zbx_del_first_zbxsrv }}"
    
    # Remoção
    - name: Remove script to remove the first zabbix serve register on Zabbix Server
      ansible.builtin.file:
        path: "/tmp/zbx_del_first_zbxsrv.sh"
        state: absent
  when: hostid_check.stat.exists == false
